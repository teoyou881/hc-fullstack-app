# 1. www.hyungchul.com 으로 들어오는 모든 HTTP/HTTPS 요청을 hyungchul.com 으로 리디렉션
# 이 블록은 먼저 처리되어야 합니다.
server {
    listen 80;
    listen 443 ssl; # ALB가 HTTP와 HTTPS 둘 다 Nginx로 전달할 수 있으므로 443도 리스닝
                     # 만약 ALB가 HTTP를 HTTPS로 리디렉션하고, HTTPS만 Nginx로 전달한다면 이 줄은 필요 없습니다.
                     # 하지만 안전을 위해 넣어두는 것이 좋습니다.

    server_name www.hyungchul.com; # www 서브도메인에서 오는 요청을 받음

    # SSL 설정 (ALB가 SSL termination을 한다면 Nginx 컨테이너에는 이 부분이 필요 없습니다.
    # 만약 ALB 없이 Nginx가 직접 SSL을 처리한다면 이 부분이 필수입니다.)
    # ssl_certificate /etc/nginx/ssl/your_domain.crt;
    # ssl_certificate_key /etc/nginx/ssl/your_domain.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers on;

    # 모든 www 요청을 non-www로 영구 리디렉션
    return 301 $scheme://hyungchul.com$request_uri;
}


# 2. HTTP (80번 포트) 요청을 HTTPS (443번 포트)로 리디렉션하는 서버 블록
# (ALB가 이 리디렉션을 처리한다면 이 블록은 Nginx에서 필요 없습니다.
# 하지만 Nginx가 직접 HTTP 요청을 받는 경우에 대비하여 포함합니다.)
server {
    listen 80;
    server_name hyungchul.com; # 비-www 도메인에서 오는 HTTP 요청을 받음

    # 모든 HTTP 요청을 HTTPS로 301 영구 리디렉션
    return 301 https://$server_name$request_uri;
}


# 3. HTTPS (443번 포트)를 리스닝하고 실제 애플리케이션을 서빙하는 서버 블록
# (ALB가 SSL termination을 한다면 Nginx 컨테이너는 80번 포트에서만 요청을 들음)
server {
    # AWS ALB/CloudFront 뒤에 있다면 listen 80; 만 필요합니다.
    # ALB가 Nginx로 들어오는 트래픽을 HTTP로 변환하기 때문입니다.
    listen 80; # ALB/CloudFront로부터 HTTP 트래픽을 받음

    # 만약 Nginx가 직접 HTTPS를 처리해야 한다면 listen 443 ssl; 로 변경하고
    # SSL 인증서 관련 설정을 추가해야 합니다. (아래 주석 처리된 부분)
    # listen 443 ssl;
    # ssl_certificate /etc/nginx/ssl/your_domain.crt;
    # ssl_certificate_key /etc/nginx/ssl/your_domain.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers on;

    server_name hyungchul.com; # 실제 서비스 도메인 (비-www)

    root /usr/share/nginx/html;
    index index.html index.htm;

    # SPA 라우팅을 위한 설정
    location / {
        try_files $uri $uri/ /index.html;
    }

    # 백엔드 API 프록시 설정
    # /api/ 로 시작하는 모든 요청을 백엔드 컨테이너로 전달합니다.
    # proxy_pass 뒤에 슬래시(/)를 붙이면 /api/ 접두사가 제거되고 전달됩니다.
    # 백엔드가 /users 를 받는다면: proxy_pass http://backend:8080/;
    # 백엔드가 /api/users 를 받는다면: proxy_pass http://backend:8080;
    location /api/ {
        proxy_pass http://backend:8080; # 백엔드가 /api/ 접두사를 포함하여 받는다고 가정
        # 백엔드 Spring Boot 컨트롤러에 @RequestMapping("/api/users") 이렇게 되어 있다면 위와 같이.

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 에러 페이지 설정 (선택 사항)
#     error_page 500 502 503 504 /50x.html;
#     location = /50x.html {
#         root /usr/share/nginx/html;
#     }

    # Gzip 압축 활성화 (성능 향상)
    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
}